//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.12
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: MATRIX_VECTOR_CONTROL ()
//
module MATRIX_VECTOR_CONTROL // "system.matrix_vector.matrix_vector_control"
(
    input logic matrix_vector_control_clock,
    input logic matrix_vector_control_reset,
    input logic matrix_vector_control_valid,
    input logic [7:0] matrix_vector_control_matrix_btint_a[3][4],
    input logic [7:0] matrix_vector_control_matrix_btint_b[3][4],
    input logic [1:0] matrix_vector_control_matrix_overflow[3][4],
    input logic [7:0] matrix_vector_control_vector_btint_a[4],
    input logic [7:0] matrix_vector_control_vector_btint_b[4],
    input logic [1:0] matrix_vector_control_vector_overflow[4],
    input logic [7:0] matrix_vector_control_c_out_btint_a[4],
    input logic [7:0] matrix_vector_control_c_out_btint_b[4],
    input logic [1:0] matrix_vector_control_c_out_overflow[4],
    output logic [7:0] matrix_vector_control_result_btint_a[3],
    output logic [7:0] matrix_vector_control_result_btint_b[3],
    output logic [1:0] matrix_vector_control_result_overflow[3],
    output logic [7:0] matrix_vector_control_b_in_btint_a[4],
    output logic [7:0] matrix_vector_control_b_in_btint_b[4],
    output logic [1:0] matrix_vector_control_b_in_overflow[4],
    output logic [7:0] matrix_vector_control_c_in_btint_a[4],
    output logic [7:0] matrix_vector_control_c_in_btint_b[4],
    output logic [1:0] matrix_vector_control_c_in_overflow[4],
    output logic matrix_vector_control_reset_out,
    output logic matrix_vector_control_done
);

//------------------------------------------------------------------------------
// Clocked THREAD: control (matrix_vector_control.cpp:6:1) 

// Thread-local variables
logic [3:0] control_WAIT_N_COUNTER;
logic [3:0] control_WAIT_N_COUNTER_next;
logic matrix_vector_control_reset_out_next;
logic matrix_vector_control_done_next;
logic [7:0] result_btint_a[3];
logic [7:0] result_btint_a_next[3];
logic [7:0] result_btint_b[3];
logic [7:0] result_btint_b_next[3];
logic [1:0] result_overflow[3];
logic [1:0] result_overflow_next[3];
logic signed [31:0] index[4];
logic signed [31:0] index_next[4];
logic vector_done;
logic vector_done_next;
logic [7:0] matrix_vector_control_result_btint_a_next[3];
logic [7:0] matrix_vector_control_result_btint_b_next[3];
logic [1:0] matrix_vector_control_result_overflow_next[3];
logic [7:0] matrix_vector_control_b_in_btint_a_next[4];
logic [7:0] matrix_vector_control_b_in_btint_b_next[4];
logic [1:0] matrix_vector_control_b_in_overflow_next[4];
logic [7:0] matrix_vector_control_c_in_btint_a_next[4];
logic [7:0] matrix_vector_control_c_in_btint_b_next[4];
logic [1:0] matrix_vector_control_c_in_overflow_next[4];
logic control_PROC_STATE;
logic control_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : control_comb     // matrix_vector_control.cpp:6:1
    control_func;
end
function void control_func;
    integer TMP_0_value;
    logic [7:0] output_btint_a;
    logic [7:0] output_btint_b;
    logic [1:0] output_overflow;
    integer output_index;
    integer output_value;
    logic [7:0] output_btint_a_1;
    logic [7:0] output_btint_b_1;
    logic [1:0] output_overflow_1;
    logic [7:0] TMP_2_btint_a;
    logic [7:0] TMP_2_btint_b;
    logic [1:0] TMP_2_overflow;
    logic TMP_0_isNegative;
    integer TMP_0_i;
    logic [7:0] TMP_1_btint_a;
    logic [7:0] TMP_1_btint_b;
    logic [1:0] TMP_1_overflow;
    logic [7:0] tmp_btint_a;
    logic [7:0] tmp_btint_b;
    logic [1:0] tmp_overflow;
    integer TMP_3_value;
    logic [7:0] output_btint_a_2;
    logic [7:0] output_btint_b_2;
    logic [1:0] output_overflow_2;
    integer output_index_1;
    integer output_value_1;
    logic [7:0] output_btint_a_3;
    logic [7:0] output_btint_b_3;
    logic [1:0] output_overflow_3;
    logic [7:0] TMP_5_btint_a;
    logic [7:0] TMP_5_btint_b;
    logic [1:0] TMP_5_overflow;
    logic TMP_3_isNegative;
    integer TMP_3_i;
    logic [7:0] TMP_4_btint_a;
    logic [7:0] TMP_4_btint_b;
    logic [1:0] TMP_4_overflow;
    logic [7:0] tmp_btint_a_1;
    logic [7:0] tmp_btint_b_1;
    logic [1:0] tmp_overflow_1;
    integer TMP_6_value;
    logic [7:0] output_btint_a_4;
    logic [7:0] output_btint_b_4;
    logic [1:0] output_overflow_4;
    integer output_index_2;
    integer output_value_2;
    logic [7:0] output_btint_a_5;
    logic [7:0] output_btint_b_5;
    logic [1:0] output_overflow_5;
    logic [7:0] TMP_8_btint_a;
    logic [7:0] TMP_8_btint_b;
    logic [1:0] TMP_8_overflow;
    logic TMP_6_isNegative;
    integer TMP_6_i;
    logic [7:0] TMP_7_btint_a;
    logic [7:0] TMP_7_btint_b;
    logic [1:0] TMP_7_overflow;
    integer TMP_9_value;
    logic [7:0] output_btint_a_6;
    logic [7:0] output_btint_b_6;
    logic [1:0] output_overflow_6;
    integer output_index_3;
    integer output_value_3;
    logic [7:0] output_btint_a_7;
    logic [7:0] output_btint_b_7;
    logic [1:0] output_overflow_7;
    logic [7:0] TMP_11_btint_a;
    logic [7:0] TMP_11_btint_b;
    logic [1:0] TMP_11_overflow;
    logic TMP_9_isNegative;
    integer TMP_9_i;
    logic [7:0] TMP_10_btint_a;
    logic [7:0] TMP_10_btint_b;
    logic [1:0] TMP_10_overflow;
    integer TMP_12_value;
    logic [7:0] output_btint_a_8;
    logic [7:0] output_btint_b_8;
    logic [1:0] output_overflow_8;
    integer output_index_4;
    integer output_value_4;
    logic [7:0] output_btint_a_9;
    logic [7:0] output_btint_b_9;
    logic [1:0] output_overflow_9;
    logic [7:0] TMP_14_btint_a;
    logic [7:0] TMP_14_btint_b;
    logic [1:0] TMP_14_overflow;
    logic TMP_12_isNegative;
    integer TMP_12_i;
    logic [7:0] TMP_13_btint_a;
    logic [7:0] TMP_13_btint_b;
    logic [1:0] TMP_13_overflow;
    tmp_btint_a = 0;
    tmp_btint_b = 0;
    tmp_overflow = 0;
    TMP_3_value = 0;
    output_btint_a_2 = 0;
    output_btint_b_2 = 0;
    output_overflow_2 = 0;
    output_index_1 = 0;
    output_value_1 = 0;
    output_btint_a_3 = 0;
    output_btint_b_3 = 0;
    output_overflow_3 = 0;
    TMP_5_btint_a = 0;
    TMP_5_btint_b = 0;
    TMP_5_overflow = 0;
    TMP_3_isNegative = 0;
    TMP_3_i = 0;
    TMP_4_btint_a = 0;
    TMP_4_btint_b = 0;
    TMP_4_overflow = 0;
    tmp_btint_a_1 = 0;
    tmp_btint_b_1 = 0;
    tmp_overflow_1 = 0;
    TMP_6_value = 0;
    output_btint_a_4 = 0;
    output_btint_b_4 = 0;
    output_overflow_4 = 0;
    output_index_2 = 0;
    output_value_2 = 0;
    output_btint_a_5 = 0;
    output_btint_b_5 = 0;
    output_overflow_5 = 0;
    TMP_8_btint_a = 0;
    TMP_8_btint_b = 0;
    TMP_8_overflow = 0;
    TMP_6_isNegative = 0;
    TMP_6_i = 0;
    TMP_7_btint_a = 0;
    TMP_7_btint_b = 0;
    TMP_7_overflow = 0;
    TMP_9_value = 0;
    output_btint_a_6 = 0;
    output_btint_b_6 = 0;
    output_overflow_6 = 0;
    output_index_3 = 0;
    output_value_3 = 0;
    output_btint_a_7 = 0;
    output_btint_b_7 = 0;
    output_overflow_7 = 0;
    TMP_11_btint_a = 0;
    TMP_11_btint_b = 0;
    TMP_11_overflow = 0;
    TMP_9_isNegative = 0;
    TMP_9_i = 0;
    TMP_10_btint_a = 0;
    TMP_10_btint_b = 0;
    TMP_10_overflow = 0;
    TMP_12_value = 0;
    output_btint_a_8 = 0;
    output_btint_b_8 = 0;
    output_overflow_8 = 0;
    output_index_4 = 0;
    output_value_4 = 0;
    output_btint_a_9 = 0;
    output_btint_b_9 = 0;
    output_overflow_9 = 0;
    TMP_14_btint_a = 0;
    TMP_14_btint_b = 0;
    TMP_14_overflow = 0;
    TMP_12_isNegative = 0;
    TMP_12_i = 0;
    TMP_13_btint_a = 0;
    TMP_13_btint_b = 0;
    TMP_13_overflow = 0;
    index_next = index;
    matrix_vector_control_b_in_btint_a_next = matrix_vector_control_b_in_btint_a;
    matrix_vector_control_b_in_btint_b_next = matrix_vector_control_b_in_btint_b;
    matrix_vector_control_b_in_overflow_next = matrix_vector_control_b_in_overflow;
    matrix_vector_control_c_in_btint_a_next = matrix_vector_control_c_in_btint_a;
    matrix_vector_control_c_in_btint_b_next = matrix_vector_control_c_in_btint_b;
    matrix_vector_control_c_in_overflow_next = matrix_vector_control_c_in_overflow;
    matrix_vector_control_done_next = matrix_vector_control_done;
    matrix_vector_control_reset_out_next = matrix_vector_control_reset_out;
    matrix_vector_control_result_btint_a_next = matrix_vector_control_result_btint_a;
    matrix_vector_control_result_btint_b_next = matrix_vector_control_result_btint_b;
    matrix_vector_control_result_overflow_next = matrix_vector_control_result_overflow;
    result_btint_a_next = result_btint_a;
    result_btint_b_next = result_btint_b;
    result_overflow_next = result_overflow;
    vector_done_next = vector_done;
    control_WAIT_N_COUNTER_next = control_WAIT_N_COUNTER;
    control_PROC_STATE_next = control_PROC_STATE;
    
    case (control_PROC_STATE)
        0: begin
            if (matrix_vector_control_valid)
            begin
                for (integer i_3 = 0; i_3 < 3; i_3++)
                begin
                    matrix_vector_control_result_btint_a_next[i_3] = result_btint_a_next[i_3]; matrix_vector_control_result_btint_b_next[i_3] = result_btint_b_next[i_3]; matrix_vector_control_result_overflow_next[i_3] = result_overflow_next[i_3];
                end
                if (index_next[4 - 1] >= 3 + 1)
                begin
                    matrix_vector_control_done_next = 1;
                end else begin
                    matrix_vector_control_done_next = 0;
                end
                if (!vector_done_next)
                begin
                    for (integer i_4 = 0; i_4 < 4; i_4++)
                    begin
                        tmp_btint_a = matrix_vector_control_vector_btint_a[i_4]; tmp_btint_b = matrix_vector_control_vector_btint_b[i_4]; tmp_overflow = matrix_vector_control_vector_overflow[i_4];
                        matrix_vector_control_b_in_btint_a_next[i_4] = tmp_btint_a; matrix_vector_control_b_in_btint_b_next[i_4] = tmp_btint_b; matrix_vector_control_b_in_overflow_next[i_4] = tmp_overflow;
                        matrix_vector_control_reset_out_next = 1;
                    end
                    vector_done_next = 1;
                end else begin
                    matrix_vector_control_reset_out_next = 0;
                    for (integer i_5 = 0; i_5 < 4; i_5++)
                    begin
                        if (index_next[i_5] < 0 || index_next[i_5] > 3 - 1)
                        begin
                            TMP_3_value = 0;
                            // Call from_int() begin
                            output_btint_a_2 = 0;
                            output_btint_b_2 = 0;
                            output_overflow_2 = 0;
                            for (integer i_6 = 0; i_6 < 8; i_6++)
                            begin
                                output_index_1 = i_6; output_value_1 = 0;
                                // Call set_value() begin
                                output_btint_a_3 = 0;
                                output_btint_b_3 = 0;
                                output_overflow_3 = 0;
                                output_btint_a_3 = output_btint_a_2;
                                output_btint_b_3 = output_btint_b_2;
                                output_overflow_3 = output_overflow_2;
                                case (0)
                                0 : begin
                                    output_btint_a_3[output_index_1] = 0;
                                    output_btint_b_3[output_index_1] = 1;
                                end
                                endcase
                                TMP_5_btint_a = output_btint_a_3; TMP_5_btint_b = output_btint_b_3; TMP_5_overflow = output_overflow_3;
                                // Call set_value() end
                                output_btint_a_2 = TMP_5_btint_a; output_btint_b_2 = TMP_5_btint_b; output_overflow_2 = TMP_5_overflow;
                            end
                            TMP_3_isNegative = TMP_3_value < 0;
                            TMP_3_i = 0;
                            TMP_4_btint_a = output_btint_a_2; TMP_4_btint_b = output_btint_b_2; TMP_4_overflow = output_overflow_2;
                            // Call from_int() end
                            matrix_vector_control_b_in_btint_a_next[i_5] = TMP_4_btint_a; matrix_vector_control_b_in_btint_b_next[i_5] = TMP_4_btint_b; matrix_vector_control_b_in_overflow_next[i_5] = TMP_4_overflow;
                        end else begin
                            tmp_btint_a_1 = matrix_vector_control_matrix_btint_a[index_next[i_5]][i_5]; tmp_btint_b_1 = matrix_vector_control_matrix_btint_b[index_next[i_5]][i_5]; tmp_overflow_1 = matrix_vector_control_matrix_overflow[index_next[i_5]][i_5];
                            matrix_vector_control_b_in_btint_a_next[i_5] = tmp_btint_a_1; matrix_vector_control_b_in_btint_b_next[i_5] = tmp_btint_b_1; matrix_vector_control_b_in_overflow_next[i_5] = tmp_overflow_1;
                        end
                    end
                    TMP_6_value = 0;
                    // Call from_int() begin
                    output_btint_a_4 = 0;
                    output_btint_b_4 = 0;
                    output_overflow_4 = 0;
                    for (integer i_7 = 0; i_7 < 8; i_7++)
                    begin
                        output_index_2 = i_7; output_value_2 = 0;
                        // Call set_value() begin
                        output_btint_a_5 = 0;
                        output_btint_b_5 = 0;
                        output_overflow_5 = 0;
                        output_btint_a_5 = output_btint_a_4;
                        output_btint_b_5 = output_btint_b_4;
                        output_overflow_5 = output_overflow_4;
                        case (0)
                        0 : begin
                            output_btint_a_5[output_index_2] = 0;
                            output_btint_b_5[output_index_2] = 1;
                        end
                        endcase
                        TMP_8_btint_a = output_btint_a_5; TMP_8_btint_b = output_btint_b_5; TMP_8_overflow = output_overflow_5;
                        // Call set_value() end
                        output_btint_a_4 = TMP_8_btint_a; output_btint_b_4 = TMP_8_btint_b; output_overflow_4 = TMP_8_overflow;
                    end
                    TMP_6_isNegative = TMP_6_value < 0;
                    TMP_6_i = 0;
                    TMP_7_btint_a = output_btint_a_4; TMP_7_btint_b = output_btint_b_4; TMP_7_overflow = output_overflow_4;
                    // Call from_int() end
                    matrix_vector_control_c_in_btint_a_next[0] = TMP_7_btint_a; matrix_vector_control_c_in_btint_b_next[0] = TMP_7_btint_b; matrix_vector_control_c_in_overflow_next[0] = TMP_7_overflow;
                    for (integer i_8 = 1; i_8 < 4; i_8++)
                    begin
                        matrix_vector_control_c_in_btint_a_next[i_8] = matrix_vector_control_c_out_btint_a[i_8 - 1]; matrix_vector_control_c_in_btint_b_next[i_8] = matrix_vector_control_c_out_btint_b[i_8 - 1]; matrix_vector_control_c_in_overflow_next[i_8] = matrix_vector_control_c_out_overflow[i_8 - 1];
                    end
                    if (index_next[4 - 1] >= 1 && index_next[4 - 1] <= 3)
                    begin
                        result_btint_a_next[index_next[4 - 1] - 1] = matrix_vector_control_c_out_btint_a[4 - 1]; result_btint_b_next[index_next[4 - 1] - 1] = matrix_vector_control_c_out_btint_b[4 - 1]; result_overflow_next[index_next[4 - 1] - 1] = matrix_vector_control_c_out_overflow[4 - 1];
                    end
                    for (integer i_9 = 0; i_9 < 4; i_9++)
                    begin
                        index_next[i_9]++;
                    end
                end
            end
            control_WAIT_N_COUNTER_next = (8 + 3) + 4;
            control_PROC_STATE_next = 1; return;    // matrix_vector_control.cpp:65:9;
        end
        1: begin
            if (control_WAIT_N_COUNTER != 1) begin
                control_WAIT_N_COUNTER_next = control_WAIT_N_COUNTER - 1;
                control_PROC_STATE_next = 1; return;    // matrix_vector_control.cpp:65:9;
            end;
            if (matrix_vector_control_valid)
            begin
                for (integer i_3 = 0; i_3 < 3; i_3++)
                begin
                    matrix_vector_control_result_btint_a_next[i_3] = result_btint_a_next[i_3]; matrix_vector_control_result_btint_b_next[i_3] = result_btint_b_next[i_3]; matrix_vector_control_result_overflow_next[i_3] = result_overflow_next[i_3];
                end
                if (index_next[4 - 1] >= 3 + 1)
                begin
                    matrix_vector_control_done_next = 1;
                end else begin
                    matrix_vector_control_done_next = 0;
                end
                if (!vector_done_next)
                begin
                    for (integer i_4 = 0; i_4 < 4; i_4++)
                    begin
                        tmp_btint_a = matrix_vector_control_vector_btint_a[i_4]; tmp_btint_b = matrix_vector_control_vector_btint_b[i_4]; tmp_overflow = matrix_vector_control_vector_overflow[i_4];
                        matrix_vector_control_b_in_btint_a_next[i_4] = tmp_btint_a; matrix_vector_control_b_in_btint_b_next[i_4] = tmp_btint_b; matrix_vector_control_b_in_overflow_next[i_4] = tmp_overflow;
                        matrix_vector_control_reset_out_next = 1;
                    end
                    vector_done_next = 1;
                end else begin
                    matrix_vector_control_reset_out_next = 0;
                    for (integer i_5 = 0; i_5 < 4; i_5++)
                    begin
                        if (index_next[i_5] < 0 || index_next[i_5] > 3 - 1)
                        begin
                            TMP_9_value = 0;
                            // Call from_int() begin
                            output_btint_a_6 = 0;
                            output_btint_b_6 = 0;
                            output_overflow_6 = 0;
                            for (integer i_10 = 0; i_10 < 8; i_10++)
                            begin
                                output_index_3 = i_10; output_value_3 = 0;
                                // Call set_value() begin
                                output_btint_a_7 = 0;
                                output_btint_b_7 = 0;
                                output_overflow_7 = 0;
                                output_btint_a_7 = output_btint_a_6;
                                output_btint_b_7 = output_btint_b_6;
                                output_overflow_7 = output_overflow_6;
                                case (0)
                                0 : begin
                                    output_btint_a_7[output_index_3] = 0;
                                    output_btint_b_7[output_index_3] = 1;
                                end
                                endcase
                                TMP_11_btint_a = output_btint_a_7; TMP_11_btint_b = output_btint_b_7; TMP_11_overflow = output_overflow_7;
                                // Call set_value() end
                                output_btint_a_6 = TMP_11_btint_a; output_btint_b_6 = TMP_11_btint_b; output_overflow_6 = TMP_11_overflow;
                            end
                            TMP_9_isNegative = TMP_9_value < 0;
                            TMP_9_i = 0;
                            TMP_10_btint_a = output_btint_a_6; TMP_10_btint_b = output_btint_b_6; TMP_10_overflow = output_overflow_6;
                            // Call from_int() end
                            matrix_vector_control_b_in_btint_a_next[i_5] = TMP_10_btint_a; matrix_vector_control_b_in_btint_b_next[i_5] = TMP_10_btint_b; matrix_vector_control_b_in_overflow_next[i_5] = TMP_10_overflow;
                        end else begin
                            tmp_btint_a_1 = matrix_vector_control_matrix_btint_a[index_next[i_5]][i_5]; tmp_btint_b_1 = matrix_vector_control_matrix_btint_b[index_next[i_5]][i_5]; tmp_overflow_1 = matrix_vector_control_matrix_overflow[index_next[i_5]][i_5];
                            matrix_vector_control_b_in_btint_a_next[i_5] = tmp_btint_a_1; matrix_vector_control_b_in_btint_b_next[i_5] = tmp_btint_b_1; matrix_vector_control_b_in_overflow_next[i_5] = tmp_overflow_1;
                        end
                    end
                    TMP_12_value = 0;
                    // Call from_int() begin
                    output_btint_a_8 = 0;
                    output_btint_b_8 = 0;
                    output_overflow_8 = 0;
                    for (integer i_11 = 0; i_11 < 8; i_11++)
                    begin
                        output_index_4 = i_11; output_value_4 = 0;
                        // Call set_value() begin
                        output_btint_a_9 = 0;
                        output_btint_b_9 = 0;
                        output_overflow_9 = 0;
                        output_btint_a_9 = output_btint_a_8;
                        output_btint_b_9 = output_btint_b_8;
                        output_overflow_9 = output_overflow_8;
                        case (0)
                        0 : begin
                            output_btint_a_9[output_index_4] = 0;
                            output_btint_b_9[output_index_4] = 1;
                        end
                        endcase
                        TMP_14_btint_a = output_btint_a_9; TMP_14_btint_b = output_btint_b_9; TMP_14_overflow = output_overflow_9;
                        // Call set_value() end
                        output_btint_a_8 = TMP_14_btint_a; output_btint_b_8 = TMP_14_btint_b; output_overflow_8 = TMP_14_overflow;
                    end
                    TMP_12_isNegative = TMP_12_value < 0;
                    TMP_12_i = 0;
                    TMP_13_btint_a = output_btint_a_8; TMP_13_btint_b = output_btint_b_8; TMP_13_overflow = output_overflow_8;
                    // Call from_int() end
                    matrix_vector_control_c_in_btint_a_next[0] = TMP_13_btint_a; matrix_vector_control_c_in_btint_b_next[0] = TMP_13_btint_b; matrix_vector_control_c_in_overflow_next[0] = TMP_13_overflow;
                    for (integer i_8 = 1; i_8 < 4; i_8++)
                    begin
                        matrix_vector_control_c_in_btint_a_next[i_8] = matrix_vector_control_c_out_btint_a[i_8 - 1]; matrix_vector_control_c_in_btint_b_next[i_8] = matrix_vector_control_c_out_btint_b[i_8 - 1]; matrix_vector_control_c_in_overflow_next[i_8] = matrix_vector_control_c_out_overflow[i_8 - 1];
                    end
                    if (index_next[4 - 1] >= 1 && index_next[4 - 1] <= 3)
                    begin
                        result_btint_a_next[index_next[4 - 1] - 1] = matrix_vector_control_c_out_btint_a[4 - 1]; result_btint_b_next[index_next[4 - 1] - 1] = matrix_vector_control_c_out_btint_b[4 - 1]; result_overflow_next[index_next[4 - 1] - 1] = matrix_vector_control_c_out_overflow[4 - 1];
                    end
                    for (integer i_9 = 0; i_9 < 4; i_9++)
                    begin
                        index_next[i_9]++;
                    end
                end
            end
            control_WAIT_N_COUNTER_next = (8 + 3) + 4;
            control_PROC_STATE_next = 1; return;    // matrix_vector_control.cpp:65:9;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge matrix_vector_control_clock /*sync matrix_vector_control_reset*/) 
begin : control_ff
    if ( matrix_vector_control_reset ) begin
        integer TMP_0_value;
        logic [7:0] output_btint_a;
        logic [7:0] output_btint_b;
        logic [1:0] output_overflow;
        integer output_index;
        integer output_value;
        logic [7:0] output_btint_a_1;
        logic [7:0] output_btint_b_1;
        logic [1:0] output_overflow_1;
        logic [7:0] TMP_2_btint_a;
        logic [7:0] TMP_2_btint_b;
        logic [1:0] TMP_2_overflow;
        logic TMP_0_isNegative;
        integer TMP_0_i;
        logic [7:0] TMP_1_btint_a;
        logic [7:0] TMP_1_btint_b;
        logic [1:0] TMP_1_overflow;
        for (integer i = 0; i < 3; i++)
        begin
            TMP_0_value = 0;
            // Call from_int() begin
            output_btint_a = 0;
            output_btint_b = 0;
            output_overflow = 0;
            for (integer i_1 = 0; i_1 < 8; i_1++)
            begin
                output_index = i_1; output_value = 0;
                // Call set_value() begin
                output_btint_a_1 = 0;
                output_btint_b_1 = 0;
                output_overflow_1 = 0;
                output_btint_a_1 = output_btint_a;
                output_btint_b_1 = output_btint_b;
                output_overflow_1 = output_overflow;
                case (0)
                0 : begin
                    output_btint_a_1[output_index] = 0;
                    output_btint_b_1[output_index] = 1;
                end
                endcase
                TMP_2_btint_a = output_btint_a_1; TMP_2_btint_b = output_btint_b_1; TMP_2_overflow = output_overflow_1;
                // Call set_value() end
                output_btint_a = TMP_2_btint_a; output_btint_b = TMP_2_btint_b; output_overflow = TMP_2_overflow;
            end
            TMP_0_isNegative = TMP_0_value < 0;
            TMP_0_i = 0;
            TMP_1_btint_a = output_btint_a; TMP_1_btint_b = output_btint_b; TMP_1_overflow = output_overflow;
            // Call from_int() end
            result_btint_a[i] <= TMP_1_btint_a; result_btint_b[i] <= TMP_1_btint_b; result_overflow[i] <= TMP_1_overflow;
        end
        for (integer i_2 = 0; i_2 < 4; i_2++)
        begin
            index[i_2] <= 0 - i_2;
        end
        matrix_vector_control_reset_out <= 0;
        matrix_vector_control_done <= 0;
        vector_done <= 0;
        control_PROC_STATE <= 0;    // matrix_vector_control.cpp:25:5;
        control_WAIT_N_COUNTER <= 0;
    end
    else begin
        control_WAIT_N_COUNTER <= control_WAIT_N_COUNTER_next;
        matrix_vector_control_reset_out <= matrix_vector_control_reset_out_next;
        matrix_vector_control_done <= matrix_vector_control_done_next;
        result_btint_a <= result_btint_a_next;
        result_btint_b <= result_btint_b_next;
        result_overflow <= result_overflow_next;
        index <= index_next;
        vector_done <= vector_done_next;
        matrix_vector_control_result_btint_a <= matrix_vector_control_result_btint_a_next;
        matrix_vector_control_result_btint_b <= matrix_vector_control_result_btint_b_next;
        matrix_vector_control_result_overflow <= matrix_vector_control_result_overflow_next;
        matrix_vector_control_b_in_btint_a <= matrix_vector_control_b_in_btint_a_next;
        matrix_vector_control_b_in_btint_b <= matrix_vector_control_b_in_btint_b_next;
        matrix_vector_control_b_in_overflow <= matrix_vector_control_b_in_overflow_next;
        matrix_vector_control_c_in_btint_a <= matrix_vector_control_c_in_btint_a_next;
        matrix_vector_control_c_in_btint_b <= matrix_vector_control_c_in_btint_b_next;
        matrix_vector_control_c_in_overflow <= matrix_vector_control_c_in_overflow_next;
        control_PROC_STATE <= control_PROC_STATE_next;
    end
end

endmodule


